import * as helpers from './helpers'

export LEVELS = {
  error: {
    level: 0,
    colors: ['red', 'bgBlack']
  },
  warn: {
    level: 1,
    colors: ['black', 'bgYellow']
  },
  info: {
    level: 2,
    colors: ['green']
  },
  verbose: {
    level: 3,
    colors: ['blue', 'bgBlack']
  },
  debug: {
    level: 4,
    colors: ['cyan']
  },
  silly: {
    level: 5,
    colors: ['inverse']
  }
}

export CONSOLE = {
  level: 0,
  levels: LEVELS,
  fullColor: false,
  template: '{level}: {input}'
}

export FILE = {
  dir: process.cwd(),
  level: 0,
  levels: LEVELS,
  template:
    '{{"level":{level!json},' +
    '"input":{args!json},' +
    '"timestamp":{timestamp!json}}}'
}

export OPTIONS = {
  file: FILE,
  console: CONSOLE
}

export normalizeLevels (levels) ->
  if helpers.isNil(levels): return LEVELS

  if !helpers.isObject(levels):
    throw new TypeError(
      `expected 'options.levels' to be an Object`
    )

  Object.keys(levels).reduce((acc, cur) => {
    element = levels[cur]
    let level, colors

    if Array.isArray(element):
      now [level, colors] = element
    else if helpers.isObject(element):
      now { level, colors } = element
    else:
      throw new TypeError(
        `invalid level definition for 'options.levels.${cur}'`
      )

    acc[cur] = {
      level: Number(level) or 0,
      colors: Array.isArray(colors) ? colors : [colors]
    }

    acc
  }, {})
